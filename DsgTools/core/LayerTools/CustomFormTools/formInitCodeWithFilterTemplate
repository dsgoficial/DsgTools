# -*- coding: utf-8 -*-
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from qgis import core, gui
import re
global a

class ValidateForm:
	def __init__(self, layer, formValues, logBrowser):
		self.layer = layer 
		self.formValues = formValues
		self.rules = {rules}
		self.logBrowser = logBrowser
		self.validateForm()
		
	def calculateExpression(self, exp):
		for field in self.formValues:
			if field != 'filter':
				if len(self.formValues[field]) == 3:
					value = self.formValues[field][1][self.formValues[field][0]]
				else:
					value = self.formValues[field][0]
				exp = exp.replace('"{0}"'.format(field), "'{0}'".format(str(value)))
				exp = exp.replace("'NULL'".format(field), "NULL")
		r = QgsExpression(exp)
		return r.evaluate()
		
	def validateForm(self):
		self.cleanRulesOnForm()
		logText = ""
		for rule in self.rules:
			for field in rule:
				if field in self.formValues:
					for exp in reversed(rule[field]):
						try:
							result = self.calculateExpression(exp['rule'])
							if bool(result):
								if len(self.formValues[field]) == 3:
									self.formValues[field][2].setStyleSheet(
										"QWidget {background-color: rgb(%s)}"%(
											exp["cor_rgb"]
										)
									)
								else:
									self.formValues[field][1].setStyleSheet(
										"QWidget {background-color: rgb(%s)}"%(
											exp["cor_rgb"]
										)
									)
								logText += u"<p>{0}</p>".format(exp["descricao"])
						except:
							pass
		self.logBrowser.setText(logText)

	def cleanRulesOnForm(self):
		for field in self.formValues:
			if len(self.formValues[field]) == 3:
				self.formValues[field][2].setStyleSheet("")			
			else:
				self.formValues[field][1].setStyleSheet("")

class ManagerForm(QtCore.QObject):
    def __init__(self, dialog, layer, feature):
        super(ManagerForm, self).__init__()
        itemsFilter = {filter}
        itemsFilter.pop('A SER PREENCHIDO')
        self.itemsFilter = { item : str(((itemsFilter[item]-(itemsFilter[item]%100))/100)) for item in itemsFilter.keys() }
        self.myDialog = dialog
        self.lyr = layer
        self.validadeForm = ""
        self.logBrowser = dialog.findChild(QLabel, "logLabel")
        self.logFrame = dialog.findChild(QFrame, "logFrame")
        self.logFrame.hide()
        self.logBtn = dialog.findChild(QPushButton, "logBtn")
        self.logBtn.setCheckable(True)
        self.logBtn.clicked.connect(self.showLog)
        self.typeField = dialog.findChild(QComboBox, "tipo")
        optFilter = {"Edificação de energia": 2.0, "Edificação de serviço social": 21.0, "Edificação de lazer": 8.0, "Edificação de comércio e serviço": 9.0, "Habitacão indigena": 14.0, "Edificação pública civil": 13.0, "Edificação de extração mineral": 11.0, "Edificação ferroviária ou metroviária": 23.0, "Edificação de saúde": 20.0, "Medição de fenômenos": 16.0, "Edificação industrial": 10.0, "Edificação agropecuária": 12.0, "Posto de combustivel": 26.0, "Edificação ou construção turística": 7.0, "Edificação de comunicação": 1.0, "A SER PREENCHIDO": 9.0, "Edificação de ensino": 5.0, "Edificação religiosa": 6.0, "Edificação de abastecimento de água": 3.0, "Edificação habitacional": 27.0, "Edificação rodoviária": 22.0, "Edificação genérica": 0.0, "Edificação portuária": 25.0, "Edificação de saneamento": 4.0, "Posto de polícia rodoviária": 18.0, "Edificação aeroportuária": 24.0, "Posto fiscal": 19.0, "Edificação militar": 17.0}
        optFilter.pop('A SER PREENCHIDO')
        self.optFilter = {item : optFilter[item] for item in optFilter}
        self.filterField = dialog.findChild(QComboBox, "filter")
        self.filterField.addItem(u'Filtro')
        self.filterField.addItems(sorted(self.optFilter.keys()))
        self.filterField.currentIndexChanged.connect(self.filterTypeField)
        idx_field = self.lyr.fields().indexOf('tipo')
        self.mapValue = self.lyr.editorWidgetSetup(idx_field).config()['map']
        buttonBox = dialog.findChild(QDialogButtonBox,"buttonBox")
        buttonBox.rejected.connect(self.finishedForm)
        buttonBox.accepted.connect(self.finishedForm)
        button_ok = buttonBox.button(QDialogButtonBox.Ok)
        button_ok.setAutoDefault(True)
        button_ok.setDefault(True)
        button_cancel = buttonBox.button(QDialogButtonBox.Cancel)
        button_cancel.setAutoDefault(False)
        button_cancel.setDefault(False)
        self.myDialog.installEventFilter(self)

    def showLog(self, state):
        if state:
            self.logFrame.show()
        else:
            self.logFrame.hide()

    def eventFilter(self, o, event):
        if event.type() in [7, 10, 11, 100]:
            self.validateLayerByRules()
        return False

    def validateLayerByRules(self):
        formValues = {}
        for cb in self.myDialog.findChildren(QComboBox):
            idx = self.lyr.fields().indexOf(cb.objectName())
            formValues[cb.objectName()] = [
                cb.currentText(),
                self.lyr.editorWidgetSetup(idx).config()['map'] if idx > 0 else self.optFilter.keys(),
                cb
            ]
        for le in self.myDialog.findChildren(QLineEdit):
            formValues[le.objectName()] = [
                le.text(),
                le
            ]
        self.validadeForm = ValidateForm(self.lyr, formValues, self.logBrowser)
		
    def filterTypeField(self):
        value =  self.filterField.currentText()
        itemsFiltered = self.getItemsFiltered(value)
        self.typeField.clear()
        for k, v in sorted(itemsFiltered.items()):
            self.typeField.addItem(k, v)
							
    def getItemsFiltered(self, value):
        result = {}
        if value == "Filtro":
            return self.mapValue
        elif value in self.optFilter:
            valueDefault = int(self.optFilter[value])
            for k, v in self.mapValue.items():
                valueTest = int(v)
                if ((valueTest-(valueTest%100))/100) == valueDefault:
                    result[k] = v
            result.update({'A SER PREENCHIDO' : '999'})
            return result
        return result
		
    def finishedForm(self):
        idx_field = self.lyr.fields().indexOf('tipo')
        setup = core.QgsEditorWidgetSetup( 'ValueMap', {
                'map': self.mapValue
            }
        )                
        self.lyr.setEditorWidgetSetup(idx_field, setup)
    

def formOpen(dialog, layer, featureid):
	try:
		global a
		a = ManagerForm(dialog, layer, featureid)
	except:
		pass